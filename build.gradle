plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'com.google.cloud.tools.jib' version '3.1.4'
    id "org.sonarqube" version "3.4.0.2513"
    //https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-gradle/
    //https://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner-gradle/gradle-basic/build.gradle
    id 'jacoco'
    //https://docs.gradle.org/current/userguide/jacoco_plugin.html#header
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
//    maven {
//        url("http://ec2-43-200-171-36.ap-northeast-2.compute.amazonaws.com:8081/repository/test/")
//        allowInsecureProtocol(true)
//    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.jetbrains:annotations:20.1.0'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.6.2'

    //Jwt
    implementation(group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2')
    runtimeOnly(group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2')
    runtimeOnly(group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2')

    //Swagger
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'
    
    //jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    
    //health check 기능
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    //logback to slack
    implementation 'com.github.maricn:logback-slack-appender:1.4.0'

    //logback db 쿼리 로그 (jdbc)
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

    //sentry
    implementation 'io.sentry:sentry-spring-boot-starter:5.4.0'
    implementation 'io.sentry:sentry-logback:5.4.0'

    //websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.webjars:sockjs-client:1.1.2'
    implementation 'org.webjars:stomp-websocket:2.3.3-1'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.webjars.bower:bootstrap:4.3.1'
    implementation 'org.webjars.bower:vue:2.5.16'
    implementation 'org.webjars.bower:axios:0.17.1'
    implementation 'com.google.code.gson:gson:2.8.0'
}

jib {
    from {
        image = 'adoptopenjdk/openjdk11:alpine-jre'
        //mac에서 돌릴때
//        image = 'openjdk:11'
//        platforms {
//            platform {
//                architecture = "arm64"
//                os = "linux"
//            }
//        }
    }
//    to { //jenkins pipiline 스크립트에서 -Djib.to.image로 대체해줌.
//        image = '962689718920.dkr.ecr.ap-northeast-2.amazonaws.com/test'
//        tags = ['3.0']
//    }
    //HTTP 통신 허용 - Nexus registry 통신할 때 사용
    allowInsecureRegistries=true
    container {
        entrypoint = ['java', '-jar', 'Joopging-0.0.1-SNAPSHOT.jar']
        jvmFlags = ['-Xms512m', '-Xmx512m', '-Xdebug', '-XshowSettings:vm', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseContainerSupport']
        ports = ['8080']

        environment = [SPRING_OUTPUT_ANSI_ENABLED: "ALWAYS"]
        labels = [version:project.version, name:project.name, group:project.group]

        creationTime = 'USE_CURRENT_TIMESTAMP'
        format = 'Docker'
    }
    extraDirectories {
        paths {
            path {
                from = file('build/libs')
            }
        }
    }
}

//configuring the jacoco plugin
//jacoco jar 버전 설정
jacoco {
    toolVersion = "0.8.8"
}

//정적코드 분석 결과를 어떤 형태의 파일로 export할지
jacocoTestReport {
    reports{
        html.enabled=true
        xml.enabled=true
        csv.enabled=true
    }
}
//자바 Compile시 문자들을 인코딩하기 위해
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

//jacoco - sonarqube 연동
sonarqube {
    properties {
        property "sonar.projectName","SpringBoot Code Coverage Demo" //프로젝트 이름
        property "sonar.exclusions", "**/generated-*/**/*"
        property "sonar.projectKey", "org.sonarqubeJacocoCodeCoverage"
        property "sonar.reportPath" , "${project.buildDir}/jacoco/test.exec"
        property "sonar.host.url", "http://ec2-43-200-8-76.ap-northeast-2.compute.amazonaws.com:9000" //sonarqube ec2 서버 주소
        property "sonar.sources", "src/main/java" //소스코드 위치
        property "sonar.tests", "src/test/java"   // 테스트코드 위치
        property "sonar.login", "admin"            //계정정보
        property "sonar.password", "admin1234"
    }
}

tasks['sonarqube'].dependsOn test

test {
    useJUnitPlatform()
}